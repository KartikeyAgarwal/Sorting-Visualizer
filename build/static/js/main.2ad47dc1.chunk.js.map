{"version":3,"sources":["sortingAlgorithms/mergeSort.js","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/quickSort.js","SortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/insertionSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getBubbleSortAnimations","auxillaryArray","iters","swapped","swap","bubbleSort","auxArray","fstIdx","scdIdx","temp","getQuickSortAnimations","quickSort","startIndex","endIndex","pivotIndex","min","max","random","lessTailIndex","partitionArray","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","firstIndex","secondIndex","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","isColorChange","arrayBars","document","getElementsByClassName","color","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","barIndex","newHeight","barStyle","height","barOneIdx","barTwoIdx","N","key","insertionSort","javaScriptArray","getInsertionSortAnimations","mergeSortedArray","className","map","value","idx","id","onClick","mergeSort","React","Component","arrayOne","arrayTwo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6SAAO,SAASA,EAAuBC,GACnC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAiBH,EAAMI,QAE7B,OAGF,SAASC,EACPC,EACAC,EACAC,EACAL,EACAF,GAEA,GAAIM,IAAaC,EAAQ,OACzB,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAU,GACnDH,EAAgBF,EAAgBI,EAAUE,EAAWH,EAAWL,GAChEI,EAAgBF,EAAgBM,EAAY,EAAGD,EAAQF,EAAWL,GAIpE,SACEK,EACAC,EACAE,EACAD,EACAL,EACAF,GAGA,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAY,EACpB,KAAOI,GAAKJ,GAAaK,GAAKN,GAG5BP,EAAWc,KAAK,CAACF,EAAGC,IAGpBb,EAAWc,KAAK,CAACF,EAAGC,IAChBX,EAAeU,IAAMV,EAAeW,IAGtCb,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,OAIhCZ,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,MAGpC,KAAOD,GAAKJ,GAGVR,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,KAElC,KAAOC,GAAKN,GAGVP,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,KAxDlCE,CAAQV,EAAWC,EAAUE,EAAWD,EAAQL,EAAgBF,GAfhEI,CAAgBL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAgBF,GACrDA,ECLJ,SAASgB,EAAwBjB,GACpC,IAAIC,EAAY,GAIhB,OAGJ,SAAoBiB,EAAgBjB,GAChC,IACIkB,EADMD,EAAehB,OACT,EAChB,KAAMiB,EAAQ,GAAG,CAEb,IADA,IAAIC,GAAU,EACNP,EAAI,EAAGA,EAAIM,IAASN,EACxBZ,EAAWc,KAAK,CAAC,eAAgBF,EAAGA,EAAI,IACxCZ,EAAWc,KAAK,CAAC,eAAgBF,EAAGA,EAAI,IACrCK,EAAeL,GAAKK,EAAeL,EAAI,KACtCO,GAAU,EACVnB,EAAWc,KAAK,CAAC,OAAQF,EAAGK,EAAeL,EAAI,KAC/CZ,EAAWc,KAAK,CAAC,OAAQF,EAAI,EAAGK,EAAeL,KAC/CQ,EAAKH,EAAgBL,EAAGA,EAAI,IAGpC,IAAe,IAAZO,EAAmB,MACtBD,KApBJG,CADetB,EAAMI,QACDH,GACbA,EAuBX,SAASoB,EAAKE,EAAUC,EAAQC,GAE5B,IAAIC,EAAKH,EAASC,GAClBD,EAASC,GAAQD,EAASE,GAC1BF,EAASE,GAAQC,EChCd,SAASC,EAAuB3B,GACnC,IAAIC,EAAc,GACdiB,EAAiBlB,EAAMI,SAQ/B,SAASwB,EAAUV,EAAgBW,EAAYC,EAAU7B,GACrD,IAAI8B,EACAF,EAAaC,IACbC,EAMR,SAAwBb,EAAgBW,EAAYC,EAAU7B,GAC1D,IAAI8B,GA8EuBC,EA9EYH,EA8EPI,EA9EmBH,EAgF5CpB,KAAKC,MAAMD,KAAKwB,UAAYD,EAAMD,EAAM,GAAKA,IAFxD,IAA+BA,EAAKC,EA5EhChC,EAAWc,KAAK,CAAC,eAAgBgB,EAAYD,IAC7C7B,EAAWc,KAAK,CAAC,OAAQgB,EAAYb,EAAeY,KACpD7B,EAAWc,KAAK,CAAC,OAAQe,EAAUZ,EAAea,KAClD9B,EAAWc,KAAK,CAAC,eAAgBgB,EAAYD,IAC7CT,EAAKH,EAAgBa,EAAYD,GAIjC,IAFA,IAAIK,EAAgBN,EAEZhB,EAAIgB,EAAYhB,EAAIiB,IAAYjB,EACpCZ,EAAWc,KAAK,CAAC,eAAgBF,EAAGiB,IACpC7B,EAAWc,KAAK,CAAC,eAAgBF,EAAGiB,IACjCZ,EAAeL,IAAMK,EAAeY,KACnC7B,EAAWc,KAAK,CAAC,eAAgBF,EAAGsB,IACpClC,EAAWc,KAAK,CAAC,OAAQF,EAAGK,EAAeiB,KAC3ClC,EAAWc,KAAK,CAAC,OAAQoB,EAAejB,EAAeL,KACvDZ,EAAWc,KAAK,CAAC,eAAgBF,EAAGsB,IACpCd,EAAKH,EAAgBL,EAAGsB,GACxBA,KASR,OANAlC,EAAWc,KAAK,CAAC,eAAgBoB,EAAeL,IAChD7B,EAAWc,KAAK,CAAC,OAAQe,EAAUZ,EAAeiB,KAClDlC,EAAWc,KAAK,CAAC,OAAQoB,EAAejB,EAAeY,KACvD7B,EAAWc,KAAK,CAAC,eAAgBoB,EAAeL,IAEhDT,EAAKH,EAAgBiB,EAAeL,GAC7BK,EAnCUC,CAAelB,EAAgBW,EAAYC,EAAU7B,GAClE2B,EAAUV,EAAgBW,EAAYE,EAAa,EAAG9B,GACtD2B,EAAUV,EAAgBa,EAAa,EAAGD,EAAU7B,IAZxD2B,CAAUV,EAAgB,EAAGA,EAAehB,OAAS,EAAGD,GACxD,IAAMoC,EAAwBrC,EAAMI,QAAQkC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAI,yBAiFhB,SAAwBC,EAAYC,GAChC,GAAID,EAAWzC,SAAW0C,EAAY1C,OAClC,OAAO,EAEX,IAAK,IAAIW,EAAI,EAAGA,EAAI8B,EAAWzC,OAAQW,IACrC,GAAI8B,EAAW9B,KAAO+B,EAAY/B,GAChC,OAAO,EAGX,OAAO,EA1F8BgC,CAAeR,EAAuBnB,IAC3ElB,EAAQkB,EACDjB,EAyEX,SAASoB,EAAKH,EAAgB4B,EAAYC,GACtC,IAAIrB,EAAOR,EAAe4B,GAC1B5B,EAAe4B,GAAc5B,EAAe6B,GAC5C7B,EAAe6B,GAAerB,E,UC7DbsB,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXlD,MAAO,IAJQ,E,gEASjBmD,KAAKC,e,mCAKL,IADA,IAAMpD,EAAQ,GACLa,EAAI,EAAGA,EA1BS,IA0BiBA,IACxCb,EAAMe,KAAKsC,EAAsB,EAAG,MAEtCF,KAAKG,SAAS,CAACtD,Y,kCAaf,IADA,IAAMC,EAAa0B,EAAuBwB,KAAKD,MAAMlD,OAC5Ca,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAK,CACxC,IAAM0C,EAAqC,iBAArBtD,EAAWY,GAAG,IAA8C,iBAArBZ,EAAWY,GAAG,GACrE2C,EAAYC,SAASC,uBAAuB,aAClD,IAAqB,IAAlBH,GAAyB,WACxB,IAAMI,EAA8B,iBAArB1D,EAAWY,GAAG,GAxCjB,MAHF,YA0Ca,cAEyBZ,EAAWY,GAFpC,GAEH+C,GAFG,WAEUC,EAFV,KAGjBC,EAAcN,EAAUI,GAAaG,MACrCC,EAAcR,EAAUK,GAAaE,MAC3CE,YAAW,WACPH,EAAYI,gBAAkBP,EAC9BK,EAAYE,gBAAkBP,IAvDnB,EAwDb9C,GARsB,QAUvB,6CACmCZ,EAAWY,GAD9C,GACYsD,GADZ,WACsBC,EADtB,KAED,IAAkB,IAAdD,EACA,iBAEJ,IAAME,EAAWb,EAAUW,GAAUJ,MACrCE,YAAW,WACPI,EAASC,OAAT,UAAqBF,EAArB,QAjEW,EAkEbvD,GARD,GAGG,Y,kCAcZ,IADA,IAAMZ,EAAaF,EAAuBoD,KAAKD,MAAMlD,OAD7C,WAECa,GACL,IAAM2C,EAAYC,SAASC,uBAAuB,aAElD,GADsB7C,EAAI,IAAM,EACb,CAAC,IAAD,cACYZ,EAAWY,GADvB,GACZ0D,EADY,KACDC,EADC,KAEbV,EAAcN,EAAUe,GAAWR,MACnCC,EAAcR,EAAUgB,GAAWT,MACnCJ,EAAQ9C,EAAI,IAAM,EAzER,MAHF,YA6EdoD,YAAW,WACPH,EAAYI,gBAAkBP,EAC9BK,EAAYE,gBAAkBP,IArFf,EAsFhB9C,QAEHoD,YAAW,WAAO,IAAD,cACkBhE,EAAWY,GAD7B,GACN0D,EADM,KACKH,EADL,KAEOZ,EAAUe,GAAWR,MAC7BO,OAAZ,UAAwBF,EAAxB,QA3Fe,EA4FhBvD,IAjBEA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,mCAwBT,IADA,IAAMZ,EAAagB,EAAwBkC,KAAKD,MAAMlD,OAC9Ca,EAAE,EAAGA,EAAEZ,EAAWC,OAAQW,IAClC,CACI,IAAM0C,EAAsC,iBAArBtD,EAAWY,GAAG,IAAgD,iBAArBZ,EAAWY,GAAG,GACxE2C,EAAYC,SAASC,uBAAuB,aAClD,IAAqB,IAAlBH,GACF,WACG,IAAMI,EAA4B,iBAAnB1D,EAAWY,GAAG,GAhGjB,MAHF,YAkGd,cAEgDZ,EAAWY,GAF3D,GAEwB0D,GAFxB,WAEmCC,EAFnC,KAGUV,EAAcN,EAAUe,GAAWR,MACnCC,EAAcR,EAAUgB,GAAWT,MACzCE,YAAW,WACPH,EAAYI,gBAAkBP,EAC9BK,EAAYE,gBAAkBP,IA/GnB,EAgHZ9C,GARN,QAWD,6CACwCZ,EAAWY,GADnD,GACiBsD,GADjB,WAC2BC,EAD3B,KAEI,IAAiB,IAAdD,EAAiB,iBACpB,IAAME,EAAWb,EAAUW,GAAUJ,MACrCE,YAAW,WACPI,EAASC,OAAT,UAAqBF,EAArB,QAxHW,EAyHZvD,GANP,GAEwB,Y,sCAW5B,IADA,IAAMZ,ECvIH,SAAoCD,GAEvC,IAAIC,EAAW,GACXsB,EAAWvB,EAAMI,SAQzB,SAAuBmB,EAAStB,GAG5B,IADA,IAAMwE,EAAIlD,EAASrB,OACXW,EAAE,EAAEA,EAAI4D,EAAG5D,IACnB,CACI,IAAI6D,EAAKnD,EAASV,GACdC,EAAGD,EAAI,EAGX,IAFAZ,EAAWc,KAAK,CAAC,eAAeD,EAAED,IAClCZ,EAAWc,KAAK,CAAC,eAAeD,EAAED,IAC5BC,GAAG,GAAKS,EAAST,GAAK4D,GAExBzE,EAAWc,KAAK,CAAC,YAAYD,EAAE,EAAES,EAAST,KAC1CS,EAAST,EAAE,GAAKS,EAAST,IACzBA,GAAI,IACE,IAEFb,EAAWc,KAAK,CAAC,eAAeD,EAAED,IAClCZ,EAAWc,KAAK,CAAC,eAAeD,EAAED,KAG1CZ,EAAWc,KAAK,CAAC,YAAYD,EAAE,EAAG4D,IAClCnD,EAAST,EAAE,GAAM4D,GA5BrBC,CAAcpD,EAAStB,GACvB,IAAM2E,EAAkB5E,EAAMI,QAAQkC,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAEC,KAGtD,OAFAC,QAAQC,IAAI,yBA8BhB,SAAwBC,EAAYC,GAChC,GAAID,EAAWzC,SAAW0C,EAAY1C,OAClC,OAAO,EAEX,IAAK,IAAIW,EAAI,EAAGA,EAAI8B,EAAWzC,OAAQW,IACrC,GAAI8B,EAAW9B,KAAO+B,EAAY/B,GAChC,OAAO,EAGX,OAAO,EAvC+BgC,CAAe+B,EAAgBrD,IACrEvB,EAAQuB,EACDtB,ED+HY4E,CAA2B1B,KAAKD,MAAMlD,OAChDa,EAAE,EAAGA,EAAEZ,EAAWC,OAAQW,IACnC,CACI,IAAM0C,EAAoC,iBAAnBtD,EAAWY,GAAG,IAA4C,iBAAnBZ,EAAWY,GAAG,GACtE2C,EAAYC,SAASC,uBAAuB,cAC7B,IAAlBH,EACF,WACG,IAAMI,EAA6B,iBAApB1D,EAAWY,GAAG,GA7HjB,MAHF,YA+Hd,cAEwCZ,EAAWY,GAFnD,GAEgB0D,GAFhB,WAE2BC,EAF3B,KAGUV,EAAcN,EAAUe,GAAWR,MACnCC,EAAcR,EAAUgB,GAAWT,MACzCE,YAAW,WACPH,EAAYI,gBAAkBP,EAC9BK,EAAYE,gBAAkBP,IA5InB,EA6IZ9C,GARN,GAUK,WAAD,kBACmCZ,EAAWY,GAD9C,GACYsD,GADZ,WACsBC,EADtB,KAEKC,EAAWb,EAAUW,GAAUJ,MACrCE,YAAW,WACPI,EAASC,OAAT,UAAqBF,EAArB,QACE,EAAJvD,GALA,M,8CAcV,IAAK,IAAIA,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAG5B,IAFA,IAAMb,EAAQ,GACRE,EAASmD,EAAsB,EAAG,KAC/BxC,EAAI,EAAGA,EAAIX,EAAQW,IAC1Bb,EAAMe,KAAKsC,GAAuB,IAAM,MAE1C,IAAMhB,EAAwBrC,EAAMI,QAAQkC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACzDsC,EAAmB/E,EAAuBC,EAAMI,SACtDqC,QAAQC,IAAIG,EAAeR,EAAuByC,O,+BAI9C,IAAD,OACE9E,EAASmD,KAAKD,MAAdlD,MAEP,OACE,yBAAK+E,UAAU,mBACb,6BACC/E,EAAMgF,KAAI,SAACC,EAAOC,GAAR,OACT,yBACEH,UAAU,YACVL,IAAKQ,EACLnB,MAAO,CACLG,gBA9KQ,YA+KRI,OAAO,GAAD,OAAKW,EAAL,MACNtB,MAAQ,YACNuB,OAGR,4BAAQC,GAAG,qBAAqBC,QAAS,kBAAM,EAAKhC,eAApD,sBACA,4BAAQgC,QAAS,kBAAM,EAAKxD,cAA5B,cACA,4BAAQuD,GAAG,YAAWC,QAAS,kBAAM,EAAKC,cAA1C,cACA,4BAAQF,GAAG,gBAAeC,QAAS,kBAAM,EAAKT,kBAA9C,kBACA,4BAAQQ,GAAG,aAAYC,QAAS,kBAAM,EAAK9D,eAA3C,oB,GAhLuCgE,IAAMC,WAyLrD,SAASlC,EAAsBrB,EAAKC,GAElC,OAAOvB,KAAKC,MAAMD,KAAKwB,UAAYD,EAAMD,EAAM,GAAKA,GAGtD,SAASa,EAAe2C,EAAUC,GAChC,GAAID,EAAStF,SAAWuF,EAASvF,OAAQ,OAAO,EAChD,IAAK,IAAIW,EAAI,EAAGA,EAAI2E,EAAStF,OAAQW,IACnC,GAAI2E,EAAS3E,KAAO4E,EAAS5E,GAC3B,OAAO,EAGX,OAAO,E,ME/MM6E,MARf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,QCKcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzC,SAAS0C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlE,QAAQkE,MAAMA,EAAMC,c","file":"static/js/main.2ad47dc1.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) \r\n  {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }","export function getBubbleSortAnimations(array) {\r\n    let animations =[];\r\n    // if(array.length<=1) return array;\r\n    let auxArray = array.slice();\r\n    bubbleSort(auxArray,animations);\r\n    return animations;\r\n}\r\n\r\nfunction bubbleSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    let iters = N - 1;\r\n    while(iters > 0) {\r\n        let swapped = false;\r\n        for(let i = 0; i < iters; ++i) {\r\n            animations.push([\"comparision1\", i, i + 1]);\r\n            animations.push([\"comparision2\", i, i + 1]);\r\n            if(auxillaryArray[i] > auxillaryArray[i + 1]) {\r\n                swapped = true;\r\n                animations.push([\"swap\", i, auxillaryArray[i + 1]]);\r\n                animations.push([\"swap\", i + 1, auxillaryArray[i]]);\r\n                swap(auxillaryArray, i, i + 1);\r\n            }\r\n        }\r\n        if(swapped === false) break;\r\n        iters--;\r\n    }\r\n}\r\n\r\nfunction swap(auxArray, fstIdx, scdIdx)\r\n{\r\n    let temp=auxArray[fstIdx];\r\n    auxArray[fstIdx]=auxArray[scdIdx];\r\n    auxArray[scdIdx]=temp;\r\n}","export function getQuickSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return animations;\r\n}\r\n\r\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivotIndex;\r\n    if (startIndex < endIndex) {\r\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\r\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\r\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\r\n    }\r\n}\r\n\r\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivotIndex = randomIntFromInterval(startIndex, endIndex);\r\n    \r\n    animations.push([\"comparision1\", pivotIndex, endIndex]);\r\n    animations.push([\"swap\", pivotIndex, auxillaryArray[endIndex]]);\r\n    animations.push([\"swap\", endIndex, auxillaryArray[pivotIndex]]);\r\n    animations.push([\"comparision2\", pivotIndex, endIndex]);\r\n    swap(auxillaryArray, pivotIndex, endIndex);\r\n\r\n    let lessTailIndex = startIndex;\r\n\r\n    for(let i = startIndex; i < endIndex; ++i) {\r\n        animations.push([\"comparision1\", i, endIndex]);\r\n        animations.push([\"comparision2\", i, endIndex]);\r\n        if(auxillaryArray[i] <= auxillaryArray[endIndex]) {\r\n            animations.push([\"comparision1\", i, lessTailIndex]);\r\n            animations.push([\"swap\", i, auxillaryArray[lessTailIndex]]);\r\n            animations.push([\"swap\", lessTailIndex, auxillaryArray[i]]);\r\n            animations.push([\"comparision2\", i, lessTailIndex]);\r\n            swap(auxillaryArray, i, lessTailIndex);\r\n            lessTailIndex++;\r\n        }\r\n    }\r\n    animations.push([\"comparision1\", lessTailIndex, endIndex]);\r\n    animations.push([\"swap\", endIndex, auxillaryArray[lessTailIndex]]);\r\n    animations.push([\"swap\", lessTailIndex, auxillaryArray[endIndex]]);\r\n    animations.push([\"comparision2\", lessTailIndex, endIndex]);\r\n    \r\n    swap(auxillaryArray, lessTailIndex, endIndex);\r\n    return lessTailIndex;\r\n\r\n    // let pivot = auxillaryArray[endIndex];\r\n    // let pivotIndex = startIndex;\r\n    // for (let i = startIndex; i <= endIndex - 1; i++) {\r\n    //     animations.push([i, endIndex]);\r\n    //     animations.push([i, endIndex]);\r\n    //     if (auxillaryArray[i] <= pivot) {\r\n    //         //Swap these two heights\r\n    //         animations.push([i, auxillaryArray[pivotIndex]]);\r\n    //         animations.push([pivotIndex, auxillaryArray[i]]);\r\n    //         swap(auxillaryArray, i , pivotIndex);\r\n    //         pivotIndex++;\r\n    //     }\r\n    //     else {\r\n    //         animations.push([-1, -1]);\r\n    //         animations.push([-1, -1]);\r\n    //     }\r\n    //     animations.push([-1, -1]);\r\n    //     animations.push([-1, -1]);\r\n    // }\r\n    // animations.push([-1, -1]);\r\n    // animations.push([-1, -1]);\r\n    // animations.push([-1, -1]);\r\n    // animations.push([-1, -1]);\r\n    // //Swap these two heights\r\n    // animations.push([pivotIndex, auxillaryArray[endIndex]]);\r\n    // animations.push([endIndex, auxillaryArray[pivotIndex]]);\r\n    // swap(auxillaryArray, pivotIndex, endIndex);\r\n    // return pivotIndex;\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","import React from 'react';\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/mergeSort.js';\r\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/bubbleSort.js';\r\nimport { getInsertionSortAnimations } from '../sortingAlgorithms/insertionSort.js';\r\nimport { getQuickSortAnimations } from '../sortingAlgorithms/quickSort.js';\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 2;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 260;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\n//This is title for the disabled buttons when sorting gets started\r\nconst DISABLED_BUTTON = \"Currently Disabled\"\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 700));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n//   disableSortButtons() {\r\n//       document.getElementsById(\"mergeSort\").disabled = true;\r\n//       let buttonStyle = document.getElementById(\"mergeSort\").style;\r\n//       document.getElementsById(\"mergeSort\").title = DISABLED_BUTTON;\r\n//       buttonStyle.background = \"#000000\";\r\n//   }\r\n\r\nquickSort() {\r\n    // this.disableSortButtons();\r\n    const animations = getQuickSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        if(isColorChange === true) {\r\n            const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIndex].style;\r\n            const barTwoStyle = arrayBars[barTwoIndex].style;\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            },i * ANIMATION_SPEED_MS);\r\n        }\r\n        else {\r\n            const [swap, barIndex, newHeight] = animations[i];\r\n            if (barIndex === -1) {\r\n                continue;\r\n            }\r\n            const barStyle = arrayBars[barIndex].style;\r\n            setTimeout(() => {\r\n                barStyle.height = `${newHeight}px`;\r\n            },i * ANIMATION_SPEED_MS);  \r\n        }        }\r\n    // this.setState({array: sortArray})\r\n    // const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\r\n    // setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \r\n}\r\n\r\nmergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const isColorChange = i % 3 !== 2;\r\n        if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n        } else {\r\n        setTimeout(() => {\r\n            const [barOneIdx, newHeight] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n        }\r\n    }\r\n}\r\n\r\nbubbleSort() {\r\n    const animations = getBubbleSortAnimations(this.state.array);\r\n    for(let i=0; i<animations.length; i++)\r\n    {\r\n        const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        if(isColorChange === true)\r\n        {\r\n            const color = (animations[i][0]===\"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            const [comparision, barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;    \r\n                barTwoStyle.backgroundColor = color;\r\n            }, i*ANIMATION_SPEED_MS);\r\n        }\r\n        else\r\n        {\r\n            const [swap, barIndex, newHeight] = animations[i];\r\n            if(barIndex === -1) continue;\r\n            const barStyle = arrayBars[barIndex].style;\r\n            setTimeout(() => {\r\n                barStyle.height = `${newHeight}px`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n        }\r\n    }\r\n}\r\n\r\ninsertionSort() {\r\n    const animations = getInsertionSortAnimations(this.state.array);\r\n    for( let i=0; i<animations.length; i++)\r\n    {\r\n        const isColorChange = (animations[i][0]===\"comparision1\") || (animations[i][0]===\"comparision2\");\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        if(isColorChange === true)\r\n        {\r\n            const color = (animations[i][0] ===\"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            const [temp,barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            }, i * ANIMATION_SPEED_MS); \r\n        }\r\n        else {\r\n            const [temp, barIndex, newHeight] = animations[i];\r\n            const barStyle = arrayBars[barIndex].style;\r\n            setTimeout(() => {\r\n                barStyle.height = `${newHeight}px`;\r\n            },i * 2);\r\n        }\r\n    }\r\n}\r\n\r\n  // NOTE: This method will only work if sorting algorithms actually return\r\n  // the sorted arrays; if they return the animations (as they currently do), then\r\n  // this method will be broken.\r\ntestSortingAlgorithms() {\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(1, 1000);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n    }\r\n}\r\n\r\nrender() {\r\n    const {array} = this.state;\r\n\r\n    return (\r\n      <div className=\"array-container\">\r\n        <div>\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n              color : \"#ffffff\",\r\n            }}>{idx}</div>\r\n        ))}\r\n        </div>\r\n        <button id=\"Generate new array\" onClick={() => this.resetArray()}>Generate New Array</button>\r\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n        <button id=\"mergeSort\"onClick={() => this.mergeSort()}>Merge Sort</button>\r\n        <button id=\"insertionSort\"onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n        <button id=\"bubbleSort\"onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n        {/* <button onClick={() => this.testSortingAlgorithms()}> */}\r\n          {/* Test Sorting Algorithms (BROKEN) */}\r\n        {/* </button> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}","export function getInsertionSortAnimations(array) \r\n{\r\n    let animations=[];\r\n    let auxArray = array.slice();\r\n    insertionSort(auxArray,animations);\r\n    const javaScriptArray = array.slice().sort((a,b) => a-b);\r\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptArray,auxArray));\r\n    array = auxArray;\r\n    return animations;\r\n}\r\n\r\nfunction insertionSort(auxArray,animations)\r\n{\r\n    const N = auxArray.length;\r\n    for(let i=1;i < N; i++)\r\n    {\r\n        let key= auxArray[i];\r\n        let j= i - 1;\r\n        animations.push([\"comparision1\",j,i]);\r\n        animations.push([\"comparision2\",j,i]);\r\n        while(j>=0 && auxArray[j] > key)\r\n        {\r\n            animations.push([\"overwrite\",j+1,auxArray[j]]);\r\n            auxArray[j+1] = auxArray[j];\r\n            j=j-1;\r\n            if(j>=0)\r\n            {\r\n                animations.push([\"comparision1\",j,i]);\r\n                animations.push([\"comparision2\",j,i]);\r\n            }\r\n        }\r\n        animations.push([\"overwrite\",j+1, key]);\r\n        auxArray[j+1] =  key;\r\n    }\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","import React from 'react';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SortingVisualizer></SortingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}